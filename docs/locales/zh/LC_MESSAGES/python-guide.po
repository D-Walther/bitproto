# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, Chao Wang
# This file is distributed under the same license as the bitproto package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: bitproto 0.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-12-13 22:41+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../python-guide.rst:4 ec49d5e108e94164aa86fac0c149e4ad
msgid "Python Guide"
msgstr "Python 语言引导"

#: ../../python-guide.rst:6 bca2443bc95342faa8accbb59d56401a
msgid "This document will introduce how to use bitproto with Python language."
msgstr "本文将介绍如何在 Python 语言中使用 bitproto 。"

#: ../../python-guide.rst:10 dc463a589f384d7499f2aa13f51fc664
msgid "Prerequisites"
msgstr "前提"

#: ../../python-guide.rst:12 783f268b6e0a49ba9d91e4cf8897afd2
msgid ""
"The python file generated by bitproto file is in Python 3, uses the "
"`typing hint <https://docs.python.org/3/library/typing.html>`_ and "
"`dataclasses <https://docs.python.org/3/library/dataclasses.html>`_. So "
"make sure you are using `Python3.7+ <https://www.python.org/downloads/>`_"
" to use bitproto in Python."
msgstr ""
"bitproto 生成的 Python 代码是基于 Python3 的，因为使用了 `typing hint "
"<https://docs.python.org/3/library/typing.html>`_ 和 `dataclasses "
"<https://docs.python.org/3/library/dataclasses.html>`_. 因此，请确保你在使用 "
"`Python3.7+ <https://www.python.org/downloads/>`_ 。"

#: ../../python-guide.rst:18 0344de5fb8704a049f01be4bf6d2f5e7
msgid "Compile bitproto for Python"
msgstr "编译 bitproto 生成 Python 文件"

#: ../../python-guide.rst:20 b99030b1157a4a689d62dfc1ea2648ea
msgid "Firstly, run the bitproto compiler to generate code for Python:"
msgstr "首先，执行 bitproto 的编译器来生成 Python 语言的代码："

#: ../../python-guide.rst:26 6efd6365813547b38bf7646c66ffb8c4
msgid ""
"Where the ``pen.bitproto`` is introduced in earlier section :ref"
":`quickstart-example-bitproto`."
msgstr "其中， ``pen.bitproto`` 已经在前面的章节 :ref:`quickstart-example-bitproto` 中做过说明。"

#: ../../python-guide.rst:28 e1eaa3775c6042c7a1ddb3b821eaa4df
msgid ""
"We will find that bitproto generates us a file named ``pen_bp.py``, which"
" contains the mapped classes, constants and api methods etc."
msgstr "我们会发现 bitproto 会在当前目录生成一个文件叫做 ``pen_bp.py`` ，其中包含了映射后的 class，常量和一些方法接口。"

#: ../../python-guide.rst:31 634f13621969479e89558e7945da3c07
msgid "In the generated ``pen_bp.py``:"
msgstr "在生成的 ``pen_bp.py`` 文件中："

#: ../../python-guide.rst:33 3c4cfd995377446f9aac4e3666ac688c
#, fuzzy
msgid ""
"The ``enum Color`` in bitproto is mapped to an ``enum.IntEum`` class, and"
" the enum values are mapped to constants as well:"
msgstr "bitproto 中的 ``enum Color`` 映射到了 Python 的一个 typing hint 的别名，枚举值则映射成了常量："

#: ../../python-guide.rst:50 c0ddb036b1a4493294bdf544b748b216
msgid "The ``Timestamp`` in bitproto is also mapped to a typing hint alias:"
msgstr "bitproto 中的 ``Timestamp`` 类型也被映射成为了一个 typing hint 的别名类型："

#: ../../python-guide.rst:56 9a4e69f629d44305b397a25ed4ad54f6
msgid ""
"The ``message Pen`` in bitproto is mapped to a dataclass decorated class "
"in Python:"
msgstr "bitproto 中的 ``message Pen`` 映射成为了一个被 dataclass 装饰的类："

#: ../../python-guide.rst:66 e6f130dcf7a547dcbfdfe0f32ee43f45
msgid ""
"The compiler also generates two method on the class ``Pen``, the encoder "
"and the decoder:"
msgstr "编译器同样生成了 ``Pen`` 的两个方法，一个是编码函数，另一个是解码函数："

#: ../../python-guide.rst:77 962c7a5c363a4ed2b9c0b2fa9d7e1cef
msgid "Install bitproto Python library"
msgstr "安装 bitproto 的 Python 支持库"

#: ../../python-guide.rst:79 3e095b9fb9d745e9a56c7876a3da079f
msgid ""
"Bitproto serialization requires a language-specific library to work, the "
"generated encoder and decoder depends on the bitproto Python library "
"underlying."
msgstr "bitproto 序列化需要依赖目标语言的支持库来工作，在这里，我们生成的编解码函数依赖 bitproto 的 Python 语言支持库。"

#: ../../python-guide.rst:82 0a6a82791e7d426e8be9d481f34ae2cb
msgid ""
"Install the bitproto Python library via `pip <http://pip-"
"installer.org/>`_:"
msgstr "通过 `pip <http://pip-installer.org/>`_ 来安装：\""

#: ../../python-guide.rst:88 58513efb9f0d47878c40b383db7fcd77
msgid ""
"The source code of the bitproto Python library is hosted on `Github "
"<https://github.com/hit9/bitproto/tree/master/lib/py>`_."
msgstr ""
"bitproto 的 Python 支持库的代码存在在 `Github "
"<https://github.com/hit9/bitproto/tree/master/lib/py>`_ 上。"

#: ../../python-guide.rst:91 c093e395b3884d87ac4c712d1e8bf03c
msgid "Run the code"
msgstr "运行代码"

#: ../../python-guide.rst:93 b7adc3cb06e346a9abf8f4e81ceb5d3c
msgid "Now, we create a file named ``main.py`` and put the following code in it:"
msgstr "现在，创建一个叫做 ``main.py`` 的文件，包含代码如下："

#: ../../python-guide.rst:111 02e3961e19a54b1692ac278f850ca9da
msgid ""
"In the code above, we firstly create a ``p`` instance of type ``Pen`` "
"with data initilization, then call a method ``p.encode()`` to encode "
"``p`` and return the encoded buffer ``s``, which is an ``bytearray``."
msgstr ""
"在上面的代码中，我们首先创建了一个 ``Pen`` 的实例 ``p`` ，并做了数据的初始化，随后执行了一个叫做 ``p.encode()`` "
"的函数，把 ``p`` 的数据编码到字节流 ``s`` 中，返回的 ``s`` 是一个 ``bytearray`` 。"

#: ../../python-guide.rst:115 2b74d78a17a04fd5b85caccefe13a2b5
msgid ""
"In the decoding part, we construct another ``p1`` instance of type "
"``Pen`` with zero initilization, then call a method ``p1.decode()`` to "
"decode bytes from buffer ``s`` into ``p1``."
msgstr ""
"在解码的部分，我们创建了另一个实例 ``p1`` ，然后调用 ``p1.decode()`` 方法，把字节流 ``s`` 中的数据解码到 "
"``p1`` 。 "

#: ../../python-guide.rst:118 2c50470ca3cc42a2bd4b659c53fbffd9
msgid ""
"The compiler also generates a method ``to_json()`` to return the json "
"string format of the structure."
msgstr "编译器同样生成了一个叫做 ``to_json()`` 的方法来输出结构化数据的 json 格式字符串。"

#: ../../python-guide.rst:120 31e7e5c8d9db45fa8076958acb00721d
msgid "Let's run it:"
msgstr "现在执行它："

